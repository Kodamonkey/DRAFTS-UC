"""Slice length calculator for FRB pipeline - dynamically calculates optimal temporal segmentation."""
import logging
from typing import Tuple, Optional
import numpy as np

from .. import config

logger = logging.getLogger(__name__)


def calculate_slice_len_from_duration() -> Tuple[int, float]:
    """
    Calcula SLICE_LEN din√°micamente basado en SLICE_DURATION_MS y metadatos del archivo.
    
    F√≥rmula inversa: SLICE_LEN = round(SLICE_DURATION_MS / (TIME_RESO √ó DOWN_TIME_RATE √ó 1000))
    
    Returns:
        Tuple[int, float]: (slice_len_calculado, duracion_real_ms)
    """
    if config.TIME_RESO <= 0:
        logger.warning("TIME_RESO no est√° configurado, usando SLICE_LEN_MIN")
        return config.SLICE_LEN_MIN, config.SLICE_DURATION_MS
    
    # üïê CORRECCI√ìN: SLICE_LEN se calcula para datos YA decimados
    # Por lo tanto, usar TIME_RESO * DOWN_TIME_RATE
    target_duration_s = config.SLICE_DURATION_MS / 1000.0
    calculated_slice_len = round(target_duration_s / (config.TIME_RESO * config.DOWN_TIME_RATE))
    
    # Aplicar l√≠mites m√≠n/m√°x
    slice_len = max(config.SLICE_LEN_MIN, min(config.SLICE_LEN_MAX, calculated_slice_len))
    
    # Calcular duraci√≥n real obtenida (para datos decimados)
    real_duration_s = slice_len * config.TIME_RESO * config.DOWN_TIME_RATE
    real_duration_ms = real_duration_s * 1000.0
    
    # Actualizar config.SLICE_LEN con el valor calculado
    config.SLICE_LEN = slice_len
    
    logger.info(f"üéØ Duraci√≥n objetivo: {config.SLICE_DURATION_MS:.1f} ms")
    logger.info(f"üìè SLICE_LEN calculado: {slice_len} muestras")
    logger.info(f"‚è±Ô∏è  Duraci√≥n real obtenida: {real_duration_ms:.1f} ms")
    
    # üïê DEBUG: Verificar c√°lculo
    logger.info(f"üïê [DEBUG SLICE_LEN] C√°lculo:")
    logger.info(f"   ‚è±Ô∏è  TIME_RESO: {config.TIME_RESO}")
    logger.info(f"   üîΩ DOWN_TIME_RATE: {config.DOWN_TIME_RATE}")
    logger.info(f"   üìè SLICE_LEN = {target_duration_s:.6f}s √∑ {config.TIME_RESO} = {calculated_slice_len}")
    logger.info(f"   üìä Para un archivo de 2M muestras decimadas: {2000000 // config.DOWN_TIME_RATE // slice_len} slices")
    
    if abs(real_duration_ms - config.SLICE_DURATION_MS) > 5.0:
        logger.warning(f"‚ö†Ô∏è  Diferencia significativa entre objetivo ({config.SLICE_DURATION_MS:.1f} ms) "
                      f"y obtenido ({real_duration_ms:.1f} ms)")
    
    return slice_len, real_duration_ms


def update_slice_len_dynamic():
    """
    Actualiza config.SLICE_LEN basado en SLICE_DURATION_MS.
    Debe llamarse despu√©s de cargar metadatos del archivo.
    """
    slice_len, real_duration_ms = calculate_slice_len_from_duration()
    logger.info(f"‚úÖ Slice configurado: {slice_len} muestras = {real_duration_ms:.1f} ms")
    return slice_len, real_duration_ms

