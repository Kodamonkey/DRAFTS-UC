"""
Utilidades para c√°lculo din√°mico de SLICE_LEN basado en duraci√≥n objetivo.
Nuevo sistema simplificado: SIEMPRE usa SLICE_DURATION_MS como par√°metro √∫nico.
"""
import logging
from typing import Tuple, Optional
import numpy as np

from . import config

logger = logging.getLogger(__name__)


def calculate_slice_len_from_duration() -> Tuple[int, float]:
    """
    Calcula SLICE_LEN din√°micamente basado en SLICE_DURATION_MS y metadatos del archivo.
    
    F√≥rmula inversa: SLICE_LEN = round(SLICE_DURATION_MS / (TIME_RESO √ó DOWN_TIME_RATE √ó 1000))
    
    Returns:
        Tuple[int, float]: (slice_len_calculado, duracion_real_ms)
    """
    if config.TIME_RESO <= 0:
        logger.warning("TIME_RESO no est√° configurado, usando SLICE_LEN_MIN")
        return config.SLICE_LEN_MIN, config.SLICE_DURATION_MS
    
    # üïê CORRECCI√ìN: SLICE_LEN se calcula para datos YA decimados
    # Por lo tanto, usar TIME_RESO * DOWN_TIME_RATE
    target_duration_s = config.SLICE_DURATION_MS / 1000.0
    calculated_slice_len = round(target_duration_s / (config.TIME_RESO * config.DOWN_TIME_RATE))
    
    # Aplicar l√≠mites m√≠n/m√°x
    slice_len = max(config.SLICE_LEN_MIN, min(config.SLICE_LEN_MAX, calculated_slice_len))
    
    # Calcular duraci√≥n real obtenida (para datos decimados)
    real_duration_s = slice_len * config.TIME_RESO * config.DOWN_TIME_RATE
    real_duration_ms = real_duration_s * 1000.0
    
    # Actualizar config.SLICE_LEN con el valor calculado
    config.SLICE_LEN = slice_len
    
    logger.info(f"üéØ Duraci√≥n objetivo: {config.SLICE_DURATION_MS:.1f} ms")
    logger.info(f"üìè SLICE_LEN calculado: {slice_len} muestras")
    logger.info(f"‚è±Ô∏è  Duraci√≥n real obtenida: {real_duration_ms:.1f} ms")
    
    # üïê DEBUG: Verificar c√°lculo
    logger.info(f"üïê [DEBUG SLICE_LEN] C√°lculo:")
    logger.info(f"   ‚è±Ô∏è  TIME_RESO: {config.TIME_RESO}")
    logger.info(f"   üîΩ DOWN_TIME_RATE: {config.DOWN_TIME_RATE}")
    logger.info(f"   üìè SLICE_LEN = {target_duration_s:.6f}s √∑ {config.TIME_RESO} = {calculated_slice_len}")
    logger.info(f"   üìä Para un archivo de 2M muestras decimadas: {2000000 // config.DOWN_TIME_RATE // slice_len} slices")
    
    if abs(real_duration_ms - config.SLICE_DURATION_MS) > 5.0:
        logger.warning(f"‚ö†Ô∏è  Diferencia significativa entre objetivo ({config.SLICE_DURATION_MS:.1f} ms) "
                      f"y obtenido ({real_duration_ms:.1f} ms)")
    
    return slice_len, real_duration_ms


def get_slice_duration_info(slice_len: int) -> Tuple[float, str]:
    """
    Convierte SLICE_LEN a informaci√≥n de duraci√≥n para display.
    
    Args:
        slice_len: N√∫mero de muestras
        
    Returns:
        Tuple[float, str]: (duracion_ms, texto_para_display)
    """
    if config.TIME_RESO <= 0:
        return config.SLICE_DURATION_MS, f"{config.SLICE_DURATION_MS:.1f} ms"
    
    duration_s = slice_len * config.TIME_RESO * config.DOWN_TIME_RATE
    duration_ms = duration_s * 1000.0
    
    return duration_ms, f"{duration_ms:.1f} ms"


def update_slice_len_dynamic():
    """
    Actualiza config.SLICE_LEN basado en SLICE_DURATION_MS.
    Debe llamarse despu√©s de cargar metadatos del archivo.
    """
    slice_len, real_duration_ms = calculate_slice_len_from_duration()
    logger.info(f"‚úÖ Slice configurado: {slice_len} muestras = {real_duration_ms:.1f} ms")
    return slice_len, real_duration_ms


# ==============================================================================
# FUNCIONES HEREDADAS (mantenidas para compatibilidad pero no se usan)
# ==============================================================================

def calculate_optimal_slice_len(
    time_reso: float,
    down_time_rate: int = 1,
    target_duration_seconds: float = 0.032,
    min_slice_len: int = 16,
    max_slice_len: int = 512,
    prefer_power_of_2: bool = True
) -> Tuple[int, float, str]:
    """
    Calcula el SLICE_LEN √≥ptimo basado en la duraci√≥n temporal deseada.
    
    Parameters
    ----------
    time_reso : float
        Resoluci√≥n temporal del archivo en segundos por muestra
    down_time_rate : int
        Factor de reducci√≥n temporal aplicado
    target_duration_seconds : float
        Duraci√≥n deseada por slice en segundos
    min_slice_len : int
        Valor m√≠nimo permitido para SLICE_LEN
    max_slice_len : int
        Valor m√°ximo permitido para SLICE_LEN
    prefer_power_of_2 : bool
        Si True, prefiere valores que son potencias de 2
        
    Returns
    -------
    tuple of (optimal_slice_len, actual_duration, explanation)
        optimal_slice_len : int
            Valor √≥ptimo calculado para SLICE_LEN
        actual_duration : float
            Duraci√≥n real que tendr√° cada slice con este valor
        explanation : str
            Explicaci√≥n del c√°lculo realizado
    """
    
    if time_reso <= 0:
        logger.warning("TIME_RESO no v√°lido (%.6f), usando SLICE_LEN por defecto", time_reso)
        return 64, 0.064, "TIME_RESO no v√°lido, usando valor por defecto"
    
    # Calcular SLICE_LEN ideal basado en duraci√≥n objetivo
    effective_time_reso = time_reso * down_time_rate
    ideal_slice_len = target_duration_seconds / effective_time_reso
    
    logger.info("C√°lculo SLICE_LEN din√°mico:")
    logger.info("  - Duraci√≥n objetivo: %.3f s", target_duration_seconds)
    logger.info("  - TIME_RESO efectivo: %.6f s", effective_time_reso)
    logger.info("  - SLICE_LEN ideal: %.1f muestras", ideal_slice_len)
    
    # Redondear a entero m√°s cercano
    slice_len_rounded = int(round(ideal_slice_len))
    
    # Si se prefieren potencias de 2, encontrar la m√°s cercana
    if prefer_power_of_2:
        powers_of_2 = [2**i for i in range(20) if 2**i >= min_slice_len and 2**i <= max_slice_len]
        if powers_of_2:
            # Encontrar la potencia de 2 m√°s cercana
            closest_power = min(powers_of_2, key=lambda x: abs(x - ideal_slice_len))
            slice_len_final = closest_power
            explanation = f"Ajustado a potencia de 2 m√°s cercana: {slice_len_final}"
        else:
            slice_len_final = slice_len_rounded
            explanation = "No hay potencias de 2 en el rango, usando redondeo"
    else:
        slice_len_final = slice_len_rounded
        explanation = "Redondeado al entero m√°s cercano"
    
    # Aplicar l√≠mites
    if slice_len_final < min_slice_len:
        slice_len_final = min_slice_len
        explanation += f" (limitado al m√≠nimo: {min_slice_len})"
    elif slice_len_final > max_slice_len:
        slice_len_final = max_slice_len
        explanation += f" (limitado al m√°ximo: {max_slice_len})"
    
    # Calcular duraci√≥n real
    actual_duration = slice_len_final * effective_time_reso
    
    logger.info("  - SLICE_LEN final: %d muestras", slice_len_final)
    logger.info("  - Duraci√≥n real: %.3f s", actual_duration)
    logger.info("  - Diferencia: %.1f%% vs objetivo", 
                abs(actual_duration - target_duration_seconds) / target_duration_seconds * 100)
    
    return slice_len_final, actual_duration, explanation

def get_dynamic_slice_len(config_module) -> int:
    """
    Obtiene el SLICE_LEN a usar, ya sea calculado din√°micamente o manual.
    
    Parameters
    ----------
    config_module : module
        M√≥dulo de configuraci√≥n que contiene los par√°metros
        
    Returns
    -------
    int
        Valor de SLICE_LEN a usar
    """
    
    # Si no est√° habilitado el modo autom√°tico, usar valor manual
    if not getattr(config_module, 'SLICE_LEN_AUTO', False):
        manual_value = getattr(config_module, 'SLICE_LEN', 64)
        logger.info("Usando SLICE_LEN manual: %d", manual_value)
        return manual_value
    
    # Obtener par√°metros necesarios
    time_reso = getattr(config_module, 'TIME_RESO', 0.0)
    down_time_rate = getattr(config_module, 'DOWN_TIME_RATE', 1)
    
    # Convertir de milisegundos a segundos
    target_duration_ms = getattr(config_module, 'SLICE_DURATION_MS', 64.0)
    target_duration = target_duration_ms / 1000.0  # Convertir ms a segundos
    
    min_slice = getattr(config_module, 'SLICE_LEN_MIN', 16)
    max_slice = getattr(config_module, 'SLICE_LEN_MAX', 512)
    
    # Calcular SLICE_LEN din√°micamente
    optimal_slice_len, actual_duration, explanation = calculate_optimal_slice_len(
        time_reso=time_reso,
        down_time_rate=down_time_rate,
        target_duration_seconds=target_duration,
        min_slice_len=min_slice,
        max_slice_len=max_slice
    )
    
    logger.info("SLICE_LEN din√°mico calculado: %d (duraci√≥n: %.1f ms) - %s", 
                optimal_slice_len, actual_duration * 1000, explanation)
    
    return optimal_slice_len

def suggest_slice_duration_for_signal_type(signal_type: str) -> float:
    """
    Sugiere una duraci√≥n de slice apropiada para diferentes tipos de se√±ales.
    
    Parameters
    ----------
    signal_type : str
        Tipo de se√±al: 'short', 'medium', 'long', 'dispersed', 'general'
        
    Returns
    -------
    float
        Duraci√≥n sugerida en segundos
    """
    
    suggestions = {
        'short': 0.016,      # 16ms - Para pulsos muy cortos
        'medium': 0.032,     # 32ms - Para FRBs t√≠picos (por defecto)
        'long': 0.064,       # 64ms - Para se√±ales largas
        'dispersed': 0.128,  # 128ms - Para se√±ales muy dispersas
        'general': 0.032     # 32ms - Configuraci√≥n general balanceada
    }
    
    return suggestions.get(signal_type.lower(), 0.032)

def print_slice_len_analysis(config_module, file_length: Optional[int] = None):
    """
    Imprime un an√°lisis completo de la configuraci√≥n SLICE_LEN.
    
    Parameters
    ----------
    config_module : module
        M√≥dulo de configuraci√≥n
    file_length : int, optional
        Longitud del archivo en muestras para an√°lisis adicional
    """
    
    print("\nüî¨ === AN√ÅLISIS DE CONFIGURACI√ìN SLICE_LEN ===\n")
    
    # Obtener configuraci√≥n actual
    slice_len_auto = getattr(config_module, 'SLICE_LEN_AUTO', False)
    target_duration = getattr(config_module, 'SLICE_DURATION_SECONDS', 0.032)
    manual_slice_len = getattr(config_module, 'SLICE_LEN', 64)
    time_reso = getattr(config_module, 'TIME_RESO', 0.0)
    down_time_rate = getattr(config_module, 'DOWN_TIME_RATE', 1)
    
    print(f"üìã CONFIGURACI√ìN ACTUAL:")
    print(f"   ‚Ä¢ Modo autom√°tico: {'‚úÖ Habilitado' if slice_len_auto else '‚ùå Deshabilitado'}")
    print(f"   ‚Ä¢ Duraci√≥n objetivo: {target_duration:.3f} s ({target_duration*1000:.1f} ms)")
    print(f"   ‚Ä¢ SLICE_LEN manual: {manual_slice_len}")
    print(f"   ‚Ä¢ TIME_RESO: {time_reso:.6f} s")
    print(f"   ‚Ä¢ DOWN_TIME_RATE: {down_time_rate}")
    
    if slice_len_auto and time_reso > 0:
        # Calcular valor din√°mico
        dynamic_slice_len = get_dynamic_slice_len(config_module)
        actual_duration = dynamic_slice_len * time_reso * down_time_rate
        
        print(f"\nüéØ C√ÅLCULO DIN√ÅMICO:")
        print(f"   ‚Ä¢ SLICE_LEN calculado: {dynamic_slice_len}")
        print(f"   ‚Ä¢ Duraci√≥n real: {actual_duration:.3f} s ({actual_duration*1000:.1f} ms)")
        print(f"   ‚Ä¢ Diferencia vs objetivo: {abs(actual_duration - target_duration)/target_duration*100:.1f}%")
        
        current_slice_len = dynamic_slice_len
    else:
        current_slice_len = manual_slice_len
        if time_reso > 0:
            manual_duration = manual_slice_len * time_reso * down_time_rate
            print(f"\nüìê VALOR MANUAL:")
            print(f"   ‚Ä¢ Duraci√≥n con valor manual: {manual_duration:.3f} s ({manual_duration*1000:.1f} ms)")
        
    # An√°lisis adicional si se proporciona longitud de archivo
    if file_length and file_length > 0:
        n_slices = file_length // down_time_rate // current_slice_len
        total_duration = file_length * time_reso if time_reso > 0 else 0
        
        print(f"\nüìä AN√ÅLISIS DEL ARCHIVO:")
        print(f"   ‚Ä¢ Longitud archivo: {file_length} muestras")
        print(f"   ‚Ä¢ Duraci√≥n total: {total_duration:.3f} s")
        print(f"   ‚Ä¢ N√∫mero de slices: {n_slices}")
        print(f"   ‚Ä¢ Resoluci√≥n por pixel: {current_slice_len/512:.3f} muestras/pixel")
        
        if time_reso > 0:
            temporal_resolution = (current_slice_len/512) * time_reso * down_time_rate
            print(f"   ‚Ä¢ Resoluci√≥n temporal: {temporal_resolution*1000:.3f} ms/pixel")
    
    # Sugerencias
    print(f"\nüí° SUGERENCIAS POR TIPO DE SE√ëAL:")
    signal_types = ['short', 'medium', 'long', 'dispersed']
    type_names = ['Se√±ales cortas', 'FRBs t√≠picos', 'Se√±ales largas', 'Muy dispersas']
    
    for signal_type, name in zip(signal_types, type_names):
        suggested_duration = suggest_slice_duration_for_signal_type(signal_type)
        print(f"   ‚Ä¢ {name}: {suggested_duration:.3f} s ({suggested_duration*1000:.0f} ms)")

if __name__ == "__main__":
    # Ejemplo de uso
    from DRAFTS.core import config
    print_slice_len_analysis(config)
