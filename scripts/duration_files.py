#!/usr/bin/env python3
"""
Script para analizar la configuraci√≥n de slices y chunks
=======================================================

Este script te permite:
1. Calcular cu√°ntos slices deber√≠as tener por chunk seg√∫n SLICE_DURATION_MS
2. Mostrar informaci√≥n detallada del archivo
3. Analizar la configuraci√≥n de chunks
4. Verificar la continuidad temporal
5. Proporcionar recomendaciones de configuraci√≥n

Uso: python scripts/analyze_slice_config.py <archivo.fits|archivo.fil>
"""

import sys
from pathlib import Path
import numpy as np

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent.parent))

from DRAFTS.core import config
from DRAFTS.io.io import get_obparams
from DRAFTS.io.filterbank_io import get_obparams_fil


def analyze_slice_configuration(file_path: str) -> None:
    """Analizar la configuraci√≥n de slices y chunks para un archivo."""
    
    file_path = Path(file_path)
    
    if not file_path.exists():
        print(f"‚ùå Error: El archivo {file_path} no existe")
        return
    
    print(f" AN√ÅLISIS DE CONFIGURACI√ìN DE SLICES Y CHUNKS")
    print("=" * 80)
    print(f"üìÅ Archivo: {file_path.name}")
    print("=" * 80)
    
    try:
        # Cargar par√°metros seg√∫n el tipo de archivo
        if file_path.suffix.lower() == ".fits":
            get_obparams(str(file_path))
        elif file_path.suffix.lower() == ".fil":
            get_obparams_fil(str(file_path))
        else:
            print(f"‚ùå Error: Formato de archivo no soportado: {file_path.suffix}")
            return
        
        # =============================================================================
        # 1. INFORMACI√ìN B√ÅSICA DEL ARCHIVO
        # =============================================================================
        
        print("\n INFORMACI√ìN B√ÅSICA DEL ARCHIVO:")
        print("-" * 50)
        
        total_samples = config.FILE_LENG
        time_resolution = config.TIME_RESO
        down_time_rate = config.DOWN_TIME_RATE
        down_freq_rate = config.DOWN_FREQ_RATE
        
        # Duraci√≥n sin decimaci√≥n
        duration_raw_sec = total_samples * time_resolution
        duration_raw_min = duration_raw_sec / 60
        duration_raw_hour = duration_raw_min / 60
        
        # Duraci√≥n despu√©s de decimaci√≥n
        duration_decimated_sec = total_samples * time_resolution * down_time_rate
        duration_decimated_min = duration_decimated_sec / 60
        duration_decimated_hour = duration_decimated_min / 60
        
        print(f"   üìè Muestras totales: {total_samples:,}")
        print(f"   ‚è±Ô∏è  Resoluci√≥n temporal: {time_resolution:.6f} segundos")
        print(f"   üîΩ Factor de decimaci√≥n temporal: {down_time_rate}")
        print(f"   üîΩ Factor de decimaci√≥n frecuencial: {down_freq_rate}")
        print()
        
        print("‚è∞ DURACI√ìN CALCULADA:")
        print(f"    Sin decimaci√≥n:")
        print(f"      {duration_raw_sec:.3f} segundos ({duration_raw_min:.2f} min, {duration_raw_hour:.2f} h)")
        print(f"    Con decimaci√≥n (usado en pipeline):")
        print(f"      {duration_decimated_sec:.3f} segundos ({duration_decimated_min:.2f} min, {duration_decimated_hour:.2f} h)")
        
        # =============================================================================
        # 2. CONFIGURACI√ìN ACTUAL DE SLICES
        # =============================================================================
        
        print("\nüéØ CONFIGURACI√ìN ACTUAL DE SLICES:")
        print("-" * 50)
        
        slice_duration_ms = config.SLICE_DURATION_MS
        slice_len = config.SLICE_LEN
        
        print(f"    SLICE_DURATION_MS: {slice_duration_ms:.1f} ms")
        print(f"   üìè SLICE_LEN: {slice_len} muestras")
        
        # Verificar si SLICE_LEN coincide con SLICE_DURATION_MS
        target_duration_s = slice_duration_ms / 1000.0
        time_reso_decimated = time_resolution * down_time_rate
        expected_slice_len = round(target_duration_s / time_reso_decimated)
        
        print(f"    SLICE_LEN esperado: {expected_slice_len} muestras")
        print(f"   ‚è±Ô∏è  Duraci√≥n real del slice: {slice_len * time_reso_decimated * 1000:.1f} ms")
        print(f"    Diferencia: {abs(slice_len * time_reso_decimated * 1000 - slice_duration_ms):.1f} ms")
        
        if abs(slice_len * time_reso_decimated * 1000 - slice_duration_ms) < 1.0:
            print("   ‚úÖ CONFIGURACI√ìN CORRECTA")
        else:
            print("   ‚ö†Ô∏è  CONFIGURACI√ìN INCORRECTA - SLICE_LEN no coincide con SLICE_DURATION_MS")
        
        # =============================================================================
        # 3. AN√ÅLISIS DE CHUNKS
        # =============================================================================
        
        print("\n AN√ÅLISIS DE CHUNKS:")
        print("-" * 50)
        
        chunk_size = config.MAX_SAMPLES_LIMIT
        overlap = getattr(config, 'CHUNK_OVERLAP_SAMPLES', 500)
        effective_chunk_size = chunk_size - overlap
        
        print(f"    Tama√±o de chunk: {chunk_size:,} muestras")
        print(f"    Overlap: {overlap} muestras")
        print(f"    Tama√±o efectivo: {effective_chunk_size:,} muestras")
        
        # Calcular n√∫mero de chunks
        num_chunks = (total_samples + effective_chunk_size - 1) // effective_chunk_size
        
        print(f"   üìä N√∫mero de chunks: {num_chunks}")
        print(f"   ‚è±Ô∏è  Duraci√≥n por chunk: {chunk_size * time_reso_decimated:.1f} segundos")
        
        # =============================================================================
        # 4. C√ÅLCULO DE SLICES POR CHUNK
        # =============================================================================
        
        print("\nüìä C√ÅLCULO DE SLICES POR CHUNK:")
        print("-" * 50)
        
        # Chunk decimado
        chunk_decimated = chunk_size // down_time_rate
        slices_per_chunk = chunk_decimated // slice_len
        
        print(f"   üìè Chunk original: {chunk_size:,} muestras")
        print(f"   üìè Chunk decimado: {chunk_decimated:,} muestras")
        print(f"   üìè SLICE_LEN: {slice_len} muestras")
        print(f"   üìä Slices por chunk: {chunk_decimated} √∑ {slice_len} = {slices_per_chunk}")
        
        # Verificar si hay slices perdidos
        total_slices_in_chunk = chunk_decimated // slice_len
        remaining_samples = chunk_decimated % slice_len
        
        if remaining_samples > 0:
            print(f"   ‚ö†Ô∏è  Muestras perdidas por chunk: {remaining_samples}")
            print(f"   ‚ö†Ô∏è  Tiempo perdido por chunk: {remaining_samples * time_reso_decimated * 1000:.1f} ms")
        else:
            print("   ‚úÖ No hay muestras perdidas")
        
        # =============================================================================
        # 5. AN√ÅLISIS DE CONTINUIDAD TEMPORAL
        # =============================================================================
        
        print("\n AN√ÅLISIS DE CONTINUIDAD TEMPORAL:")
        print("-" * 50)
        
        # Simular primeros 3 chunks
        for chunk_idx in range(min(3, num_chunks)):
            start_sample = chunk_idx * effective_chunk_size
            if chunk_idx > 0:
                start_sample -= overlap
            
            end_sample = min(start_sample + chunk_size, total_samples)
            
            # Tiempos absolutos
            chunk_start_time_sec = start_sample * time_reso_decimated
            chunk_end_time_sec = end_sample * time_reso_decimated
            
            # Slices en este chunk
            chunk_decimated_size = (end_sample - start_sample) // down_time_rate
            slices_in_chunk = chunk_decimated_size // slice_len
            
            print(f"    Chunk {chunk_idx}:")
            print(f"      üìè Muestras: {start_sample:,} a {end_sample:,}")
            print(f"      üïê Tiempo: {chunk_start_time_sec:.3f}s a {chunk_end_time_sec:.3f}s")
            print(f"       Slices: {slices_in_chunk}")
            
            if chunk_idx > 0:
                prev_chunk = chunk_idx - 1
                prev_start = prev_chunk * effective_chunk_size
                if prev_chunk > 0:
                    prev_start -= overlap
                prev_end = min(prev_start + chunk_size, total_samples)
                prev_end_time = prev_end * time_reso_decimated
                gap = chunk_start_time_sec - prev_end_time
                print(f"      üîó Gap con anterior: {gap:.3f}s")
        
        # =============================================================================
        # 6. ESTIMACI√ìN TOTAL DE SLICES
        # =============================================================================
        
        print("\nüìà ESTIMACI√ìN TOTAL DE SLICES:")
        print("-" * 50)
        
        # Slices totales esperados
        total_slices_expected = (total_samples // down_time_rate) // slice_len
        total_slices_actual = (total_samples // down_time_rate + slice_len - 1) // slice_len
        
        print(f"   üìä Slices totales esperados: {total_slices_expected:,}")
        print(f"   üìä Slices totales (con redondeo): {total_slices_actual:,}")
        print(f"    Slices por hora: {total_slices_actual / duration_decimated_hour:.0f}")
        print(f"    Slices por minuto: {total_slices_actual / duration_decimated_min:.1f}")
        
        # =============================================================================
        # 7. INFORMACI√ìN DE FRECUENCIA
        # =============================================================================
        
        print("\nüì° INFORMACI√ìN DE FRECUENCIA:")
        print("-" * 50)
        
        if hasattr(config, 'FREQ') and config.FREQ is not None:
            freq_min = config.FREQ.min()
            freq_max = config.FREQ.max()
            bandwidth = freq_max - freq_min
            
            print(f"    Frecuencia m√≠nima: {freq_min:.1f} MHz")
            print(f"    Frecuencia m√°xima: {freq_max:.1f} MHz")
            print(f"   üì° Ancho de banda: {bandwidth:.1f} MHz")
            print(f"    Canales originales: {config.FREQ_RESO}")
            print(f"    Canales despu√©s de decimaci√≥n: {config.FREQ_RESO // down_freq_rate}")
        else:
            print("   ‚ö†Ô∏è  Informaci√≥n de frecuencia no disponible")
        
        # =============================================================================
        # 8. RECOMENDACIONES
        # =============================================================================
        
        print("\nüí° RECOMENDACIONES:")
        print("-" * 50)
        
        # Verificar configuraci√≥n
        if abs(slice_len * time_reso_decimated * 1000 - slice_duration_ms) > 1.0:
            print("   üîß Ajustar SLICE_DURATION_MS para que coincida con SLICE_LEN")
            print(f"      SLICE_DURATION_MS sugerido: {slice_len * time_reso_decimated * 1000:.1f}")
        
        if remaining_samples > 0:
            print("    Considerar ajustar SLICE_LEN para evitar p√©rdida de datos")
        
        if slices_per_chunk < 10:
            print("   üîß Slices por chunk muy bajos - considerar reducir SLICE_DURATION_MS")
        elif slices_per_chunk > 1000:
            print("   üîß Slices por chunk muy altos - considerar aumentar SLICE_DURATION_MS")
        
        # Memoria estimada
        memory_per_chunk_gb = (chunk_size * config.FREQ_RESO // down_freq_rate * 4) / (1024**3)
        print(f"   üíæ Memoria estimada por chunk: {memory_per_chunk_gb:.2f} GB")
        
        if memory_per_chunk_gb > 4.0:
            print("   ‚ö†Ô∏è  Memoria por chunk muy alta - considerar reducir MAX_SAMPLES_LIMIT")
        
        # =============================================================================
        # 9. RESUMEN FINAL
        # =============================================================================
        
        print("\nüìã RESUMEN FINAL:")
        print("-" * 50)
        print(f"    SLICE_DURATION_MS: {slice_duration_ms:.1f} ms")
        print(f"   üìè SLICE_LEN: {slice_len} muestras")
        print(f"   üìä Slices por chunk: {slices_per_chunk}")
        print(f"   üì¶ N√∫mero de chunks: {num_chunks}")
        print(f"   ‚è±Ô∏è  Duraci√≥n total: {duration_decimated_hour:.2f} horas")
        print(f"   üìä Slices totales: {total_slices_actual:,}")
        
        if abs(slice_len * time_reso_decimated * 1000 - slice_duration_ms) < 1.0 and remaining_samples == 0:
            print("   ‚úÖ CONFIGURACI√ìN √ìPTIMA")
        else:
            print("   ‚ö†Ô∏è  CONFIGURACI√ìN REQUIERE AJUSTES")
        
    except Exception as e:
        print(f"‚ùå Error al analizar el archivo: {e}")
        import traceback
        traceback.print_exc()
        return


def main():
    """Funci√≥n principal."""
    if len(sys.argv) != 2:
        print(" AN√ÅLISIS DE CONFIGURACI√ìN DE SLICES Y CHUNKS")
        print("=" * 60)
        print("Uso: python scripts/analyze_slice_config.py <archivo.fits|archivo.fil>")
        print()
        print("Ejemplos:")
        print("  python scripts/analyze_slice_config.py Data/observacion.fits")
        print("  python scripts/analyze_slice_config.py Data/observacion.fil")
        print()
        print("Este script te mostrar√°:")
        print("   Informaci√≥n detallada del archivo")
        print("üéØ Configuraci√≥n actual de slices")
        print(" An√°lisis de chunks")
        print("üìä C√°lculo de slices por chunk")
        print("üîó Continuidad temporal")
        print(" Recomendaciones de configuraci√≥n")
        return
    
    file_path = sys.argv[1]
    analyze_slice_configuration(file_path)


if __name__ == "__main__":
    main()
