#!/usr/bin/env python3
"""
Localizaci√≥n exacta de todos los usos de SLICE_LEN en el c√≥digo.
Este script muestra d√≥nde y c√≥mo se usa SLICE_LEN en tu pipeline.
"""

import sys
from pathlib import Path

# Configurar path
sys.path.append(str(Path(__file__).parent))

def find_slice_len_usage():
    """Encuentra todos los usos de SLICE_LEN en el c√≥digo."""
    
    print("üîç === LOCALIZACI√ìN DE SLICE_LEN EN EL C√ìDIGO ===\n")
    
    # Archivos principales donde se usa SLICE_LEN
    files_to_check = [
        "DRAFTS/config.py",
        "DRAFTS/pipeline.py", 
        "DRAFTS/astro_conversions.py",
        "DRAFTS/image_utils.py",
        "DRAFTS/visualization.py"
    ]
    
    base_dir = Path(__file__).parent
    
    for file_path in files_to_check:
        full_path = base_dir / file_path
        if not full_path.exists():
            continue
            
        print(f"üìÅ {file_path}:")
        print("-" * 50)
        
        try:
            with open(full_path, 'r', encoding='utf-8') as f:
                lines = f.readlines()
            
            found_usage = False
            for i, line in enumerate(lines, 1):
                if 'SLICE_LEN' in line and not line.strip().startswith('#'):
                    found_usage = True
                    context_start = max(0, i-2)
                    context_end = min(len(lines), i+2)
                    
                    print(f"   üìç L√≠nea {i}:")
                    for j in range(context_start, context_end):
                        marker = ">>>" if j == i-1 else "   "
                        print(f"   {marker} {j+1:3d}: {lines[j].rstrip()}")
                    print()
            
            if not found_usage:
                print("   ‚ùå No se encontraron usos de SLICE_LEN")
                
        except Exception as e:
            print(f"   ‚ùå Error leyendo archivo: {e}")
        
        print()

def show_slice_len_flow():
    """Muestra el flujo de uso de SLICE_LEN en el pipeline."""
    
    print("üîÑ === FLUJO DE SLICE_LEN EN EL PIPELINE ===\n")
    
    steps = [
        {
            'step': 1,
            'location': 'config.py:30',
            'description': 'Definici√≥n del par√°metro',
            'code': 'SLICE_LEN: int = 64',
            'impact': 'Valor global usado en todo el pipeline'
        },
        {
            'step': 2,
            'location': 'pipeline.py:289',
            'description': 'C√°lculo de par√°metros de slicing',
            'code': 'slice_len, time_slice = _slice_parameters(width_total, config.SLICE_LEN)',
            'impact': 'Determina cu√°ntos slices se crear√°n'
        },
        {
            'step': 3,
            'location': 'pipeline.py:331-332',
            'description': 'Extracci√≥n de datos por slice',
            'code': '''slice_cube = dm_time[:, :, slice_len * j : slice_len * (j + 1)]
waterfall_block = data[j * slice_len : (j + 1) * slice_len]''',
            'impact': 'Divide datos en ventanas temporales'
        },
        {
            'step': 4,
            'location': 'image_utils.py:29',
            'description': 'Redimensionamiento para CNN',
            'code': 'img = cv2.resize(img, (512, 512))',
            'impact': 'SLICE_LEN muestras ‚Üí 512 pixels temporales'
        },
        {
            'step': 5,
            'location': 'astro_conversions.py:22',
            'description': 'Conversi√≥n pixel ‚Üí f√≠sico',
            'code': 'scale_time = slice_len / 512.0',
            'impact': 'Convierte detecciones CNN a tiempo real'
        },
        {
            'step': 6,
            'location': 'image_utils.py:144,147',
            'description': 'Metadatos temporales',
            'code': 'time_start_slice = slice_idx * config.SLICE_LEN * config.TIME_RESO',
            'impact': 'Informaci√≥n temporal para visualizaci√≥n'
        },
        {
            'step': 7,
            'location': 'visualization.py:33,34,231',
            'description': 'Visualizaci√≥n de slices',
            'code': 'prev_len = config.SLICE_LEN; config.SLICE_LEN = slice_len',
            'impact': 'Ajusta par√°metros para visualizaci√≥n correcta'
        }
    ]
    
    for step in steps:
        print(f"   {step['step']}Ô∏è‚É£  {step['description'].upper()}")
        print(f"      üìç Ubicaci√≥n: {step['location']}")
        print(f"      üìù C√≥digo:")
        for line in step['code'].split('\n'):
            print(f"         {line.strip()}")
        print(f"      üéØ Impacto: {step['impact']}")
        print()

def show_slice_len_impact_summary():
    """Muestra un resumen del impacto de SLICE_LEN."""
    
    print("üìä === RESUMEN DEL IMPACTO DE SLICE_LEN ===\n")
    
    print("üéØ CAMBIOS DIRECTOS AL MODIFICAR SLICE_LEN:")
    impacts = [
        "‚úÖ N√∫mero de slices: width_total // SLICE_LEN",
        "‚úÖ Duraci√≥n por slice: SLICE_LEN √ó TIME_RESO",
        "‚úÖ Resoluci√≥n temporal: SLICE_LEN / 512 muestras/pixel",
        "‚úÖ Precisi√≥n localizaci√≥n: (SLICE_LEN / 512) √ó TIME_RESO segundos/pixel",
        "‚úÖ Contexto temporal: SLICE_LEN √ó TIME_RESO segundos por ventana",
        "‚úÖ Oportunidades detecci√≥n: M√°s slices = m√°s oportunidades"
    ]
    
    for impact in impacts:
        print(f"   {impact}")
    
    print(f"\nüîÑ EFECTOS EN CASCADA:")
    cascades = [
        "üì∏ M√°s slices ‚Üí M√°s im√°genes 512x512 procesadas",
        "‚è±Ô∏è  M√°s slices ‚Üí Mayor tiempo de procesamiento",
        "üéØ M√°s slices ‚Üí M√°s oportunidades de detectar se√±ales fragmentadas",
        "üñºÔ∏è  M√°s slices ‚Üí M√°s archivos composite generados",
        "üìä Resoluci√≥n diferente ‚Üí Diferentes patrones detectados por CNN",
        "üé® Visualizaciones muestran diferentes ventanas temporales"
    ]
    
    for cascade in cascades:
        print(f"   {cascade}")

def main():
    """Funci√≥n principal."""
    find_slice_len_usage()
    show_slice_len_flow()
    show_slice_len_impact_summary()
    
    print("\nüí° CONCLUSI√ìN:")
    print("   SLICE_LEN es un par√°metro central que afecta:")
    print("   1. Divisi√≥n temporal de datos")
    print("   2. Resoluci√≥n del an√°lisis")
    print("   3. Entrada al modelo CNN")
    print("   4. Conversi√≥n de coordenadas")
    print("   5. N√∫mero de oportunidades de detecci√≥n")
    print("   6. Visualizaciones generadas")
    print("\n   ¬°Experimentar con diferentes valores puede revelar se√±ales ocultas!")

if __name__ == "__main__":
    main()
