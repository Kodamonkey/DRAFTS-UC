#!/usr/bin/env python3
"""
Demostraci√≥n visual de c√≥mo se muestran los rangos de frecuencia 
por banda en los gr√°ficos del sistema DRAFTS.
"""

import numpy as np
import matplotlib.pyplot as plt
import tempfile
from pathlib import Path
import sys

# Agregar la ruta del m√≥dulo DRAFTS al path
sys.path.insert(0, str(Path(__file__).parent / "DRAFTS"))

from DRAFTS import config
from DRAFTS.visualization import get_band_frequency_range, get_band_name_with_freq_range

def demo_frequency_ranges():
    """Demonstrar los rangos de frecuencia para diferentes bandas."""
    
    print("üéØ Demostraci√≥n: Rangos de frecuencia por banda\n")
    
    # Simular configuraci√≥n t√≠pica de un telescopio (ej: FAST)
    config.FREQ = np.linspace(1050, 1450, 400)  # 1050-1450 MHz con 400 canales
    config.FREQ_RESO = 400
    config.DOWN_FREQ_RATE = 2  # Factor de reducci√≥n t√≠pico
    
    print(f"üì° Configuraci√≥n simulada (tipo FAST):")
    print(f"   ‚Ä¢ Rango original: {config.FREQ.min():.1f} - {config.FREQ.max():.1f} MHz")
    print(f"   ‚Ä¢ Canales originales: {config.FREQ_RESO}")
    print(f"   ‚Ä¢ Factor de reducci√≥n: {config.DOWN_FREQ_RATE}")
    
    # Calcular frecuencias reducidas (como se hace en el pipeline)
    freq_ds = np.mean(
        config.FREQ.reshape(config.FREQ_RESO // config.DOWN_FREQ_RATE, config.DOWN_FREQ_RATE),
        axis=1,
    )
    print(f"   ‚Ä¢ Canales despu√©s de reducci√≥n: {len(freq_ds)}")
    print(f"   ‚Ä¢ Rango despu√©s de reducci√≥n: {freq_ds.min():.1f} - {freq_ds.max():.1f} MHz")
    
    print(f"\nüìä Divisi√≥n en bandas:")
    
    # Informaci√≥n detallada para cada banda
    bands_info = [
        (0, "Full Band", "Toda la banda de observaci√≥n"),
        (1, "Low Band", "Mitad inferior del espectro"),
        (2, "High Band", "Mitad superior del espectro")
    ]
    
    for band_idx, band_name, description in bands_info:
        freq_min, freq_max = get_band_frequency_range(band_idx)
        band_name_with_freq = get_band_name_with_freq_range(band_idx, band_name)
        bandwidth = freq_max - freq_min
        
        print(f"   ‚Ä¢ {band_name_with_freq}")
        print(f"     - Descripci√≥n: {description}")
        print(f"     - Ancho de banda: {bandwidth:.1f} MHz")
        
        if band_idx == 1:  # Low Band
            mid_channel = len(freq_ds) // 2
            print(f"     - Canales: 0 a {mid_channel} (de {len(freq_ds)} total)")
        elif band_idx == 2:  # High Band
            mid_channel = len(freq_ds) // 2
            print(f"     - Canales: {mid_channel} a {len(freq_ds)} (de {len(freq_ds)} total)")
        else:  # Full Band
            print(f"     - Canales: 0 a {len(freq_ds)} (todos)")
        print()


def demo_different_telescopes():
    """Demostrar c√≥mo se ven diferentes configuraciones de telescopios."""
    
    print("üî≠ Ejemplos para diferentes telescopios:\n")
    
    telescope_configs = [
        {
            "name": "FAST (China)",
            "freq_range": (1050, 1450),  # MHz
            "channels": 4096,
            "down_rate": 4
        },
        {
            "name": "Arecibo (hist√≥rico)", 
            "freq_range": (1200, 1500),  # MHz
            "channels": 2048,
            "down_rate": 2
        },
        {
            "name": "Green Bank Telescope",
            "freq_range": (1100, 1800),  # MHz  
            "channels": 1024,
            "down_rate": 1
        }
    ]
    
    for telescope in telescope_configs:
        print(f"üì° {telescope['name']}:")
        
        # Configurar para este telescopio
        config.FREQ = np.linspace(telescope['freq_range'][0], telescope['freq_range'][1], telescope['channels'])
        config.FREQ_RESO = telescope['channels']
        config.DOWN_FREQ_RATE = telescope['down_rate']
        
        print(f"   ‚Ä¢ Rango: {config.FREQ.min():.0f} - {config.FREQ.max():.0f} MHz")
        print(f"   ‚Ä¢ Canales: {config.FREQ_RESO} ‚Üí {config.FREQ_RESO // config.DOWN_FREQ_RATE}")
        
        # Mostrar bandas para este telescopio
        for band_idx, band_name in [(0, "Full"), (1, "Low"), (2, "High")]:
            band_name_with_freq = get_band_name_with_freq_range(band_idx, f"{band_name} Band")
            print(f"     - {band_name_with_freq}")
        print()


def demo_plot_titles():
    """Mostrar ejemplos de t√≠tulos de gr√°ficos con los nuevos rangos."""
    
    print("üìã Ejemplos de t√≠tulos en los gr√°ficos:\n")
    
    # Configuraci√≥n ejemplo
    config.FREQ = np.linspace(1200, 1500, 1024)
    config.FREQ_RESO = 1024
    config.DOWN_FREQ_RATE = 2
    config.TIME_RESO = 8.192e-6  # 8.192 Œºs t√≠pico
    config.DOWN_TIME_RATE = 4
    
    fits_stem = "FRB20180301_0001"
    slice_idx = 5
    time_slice = 20
    
    print("üñºÔ∏è  T√≠tulos en gr√°ficos de detecci√≥n:")
    
    for band_idx, band_name in [(0, "Full Band"), (1, "Low Band"), (2, "High Band")]:
        band_name_with_freq = get_band_name_with_freq_range(band_idx, band_name)
        
        # Simular t√≠tulo como aparecer√≠a en save_detection_plot
        freq_min, freq_max = get_band_frequency_range(band_idx)
        freq_range = f"{freq_min:.0f}‚Äì{freq_max:.0f} MHz"
        time_resolution = config.TIME_RESO * config.DOWN_TIME_RATE * 1e6
        
        title = (
            f"{fits_stem} - {band_name_with_freq}\n"
            f"Slice {slice_idx + 1}/{time_slice} | "
            f"Time Resolution: {time_resolution:.1f} Œºs | "
            f"DM Range: 50‚Äì180 (auto) pc cm‚Åª¬≥"
        )
        
        print(f"   ‚Ä¢ {band_name}:")
        print(f"     \"{title}\"")
        print()
    
    print("üñºÔ∏è  T√≠tulos en gr√°ficos compuestos (Composite Summary):")
    
    for band_idx, band_name in [(0, "Full Band"), (1, "Low Band"), (2, "High Band")]:
        band_name_with_freq = get_band_name_with_freq_range(band_idx, band_name)
        
        title = f"Composite Summary: {fits_stem} - {band_name_with_freq} - Slice {slice_idx + 1}"
        
        print(f"   ‚Ä¢ {band_name}:")
        print(f"     \"{title}\"")
        print()
    
    print("üñºÔ∏è  T√≠tulos en gr√°ficos de patches:")
    
    for band_idx, band_name in [(0, "Full Band"), (1, "Low Band"), (2, "High Band")]:
        band_name_with_freq = get_band_name_with_freq_range(band_idx, band_name)
        
        title = f"Candidate Patch - {band_name_with_freq}"
        
        print(f"   ‚Ä¢ {band_name}:")
        print(f"     \"{title}\"")
        print()


def main():
    """Funci√≥n principal de la demostraci√≥n."""
    
    print("üé® DEMOSTRACI√ìN: Visualizaci√≥n de rangos de frecuencia por banda")
    print("=" * 70)
    print()
    
    demo_frequency_ranges()
    print("\n" + "-" * 70)
    demo_different_telescopes()
    print("\n" + "-" * 70)
    demo_plot_titles()
    
    print("=" * 70)
    print("‚úÖ IMPLEMENTACI√ìN COMPLETADA")
    print()
    print("üìã Resumen de cambios implementados:")
    print("   ‚Ä¢ Los gr√°ficos ahora muestran el rango espec√≠fico de frecuencias de cada banda")
    print("   ‚Ä¢ Full Band: muestra el rango completo (ej: 1200-1500 MHz)")
    print("   ‚Ä¢ Low Band: muestra la mitad inferior (ej: 1200-1350 MHz)")
    print("   ‚Ä¢ High Band: muestra la mitad superior (ej: 1350-1500 MHz)")
    print("   ‚Ä¢ Los rangos se calculan din√°micamente seg√∫n los metadatos del archivo")
    print("   ‚Ä¢ Compatible con cualquier configuraci√≥n de telescopio")
    print()
    print("üîß Archivos modificados:")
    print("   ‚Ä¢ DRAFTS/visualization.py - Nuevas funciones de c√°lculo de rangos")
    print("   ‚Ä¢ DRAFTS/image_utils.py - T√≠tulos actualizados con rangos espec√≠ficos")
    print("   ‚Ä¢ DRAFTS/pipeline.py - Integraci√≥n del band_idx en las llamadas")
    print()
    print("üéØ Los gr√°ficos generados ahora incluir√°n informaci√≥n clara sobre")
    print("   qu√© frecuencias espec√≠ficas est√° procesando cada banda.")
    print("=" * 70)


if __name__ == "__main__":
    main()
