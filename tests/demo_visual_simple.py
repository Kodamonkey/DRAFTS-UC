#!/usr/bin/env python3
"""
Demo visual SIMPLE: Comparaci√≥n exacta de waterfalls entre bandas
"""
import numpy as np
import matplotlib.pyplot as plt

def get_band_frequency_range(frequencies, band_idx):
    """Versi√≥n simplificada para la demo"""
    freq_min, freq_max = frequencies[0], frequencies[-1]
    if band_idx == 0:  # Full band
        return (freq_min, freq_max)
    elif band_idx == 1:  # Low band
        return (freq_min, (freq_min + freq_max) / 2)
    else:  # High band
        return ((freq_min + freq_max) / 2, freq_max)

def create_visual_comparison():
    """Crea una comparaci√≥n visual de c√≥mo se ven los waterfalls en cada banda"""
    
    print("üé® DEMO VISUAL: WATERFALLS EN SISTEMA MULTI-BANDA")
    print("="*70)
    print()
    
    # Usar datos simulados para la demostraci√≥n
    print("üìä Generando datos de ejemplo...")
    
    # Simular datos de radiotelescopia
    n_freq = 200  # 200 canales de frecuencia
    n_time = 100  # 100 muestras de tiempo
    freq_start = 1200  # MHz
    freq_end = 1500    # MHz
    
    # Crear arrays de frecuencia y tiempo
    frequencies = np.linspace(freq_start, freq_end, n_freq)
    time_axis = np.linspace(0, 10, n_time)  # 10 segundos
    
    # Generar datos simulados con ruido + se√±al FRB
    np.random.seed(42)
    waterfall_data = np.random.normal(1.0, 0.2, (n_freq, n_time))
    
    # Agregar una se√±al FRB dispersa (m√°s fuerte en frecuencias altas, llega antes)
    frb_time_center = 50
    for i, freq in enumerate(frequencies):
        # Dispersion delay simulado
        delay = int(5 * (1/freq**2 - 1/freq_end**2) * 1000)
        signal_time = frb_time_center + delay
        if 0 <= signal_time < n_time:
            # Se√±al m√°s fuerte en frecuencias altas
            signal_strength = 2.0 + (freq - freq_start) / (freq_end - freq_start)
            waterfall_data[i, signal_time] += signal_strength
    
    # Crear la figura con subplots
    fig, axes = plt.subplots(2, 2, figsize=(16, 12))
    fig.suptitle('COMPARACI√ìN VISUAL: Waterfalls en Sistema Multi-Banda\n' + 
                 f'Datos: {freq_start}-{freq_end} MHz', fontsize=16, fontweight='bold')
    
    # Calcular rangos de frecuencia para cada banda
    full_range = get_band_frequency_range(frequencies, 0)
    low_range = get_band_frequency_range(frequencies, 1) 
    high_range = get_band_frequency_range(frequencies, 2)
    
    print(f"üìà Rangos calculados:")
    print(f"   Full Band: {full_range[0]:.1f} - {full_range[1]:.1f} MHz")
    print(f"   Low Band:  {low_range[0]:.1f} - {low_range[1]:.1f} MHz")
    print(f"   High Band: {high_range[0]:.1f} - {high_range[1]:.1f} MHz")
    print()
    
    # Datos originales completos
    axes[0,0].imshow(waterfall_data, aspect='auto', cmap='viridis', 
                     extent=[0, 10, freq_start, freq_end])
    axes[0,0].set_title('DATOS ORIGINALES COMPLETOS\n(Lo que lee el filterbank)', 
                        fontweight='bold')
    axes[0,0].set_ylabel('Frecuencia (MHz)')
    axes[0,0].set_xlabel('Tiempo (s)')
    
    # Full Band waterfall (id√©ntico a los datos originales)
    axes[0,1].imshow(waterfall_data, aspect='auto', cmap='viridis',
                     extent=[0, 10, freq_start, freq_end])
    axes[0,1].set_title(f'FULL BAND WATERFALL\nProcesa: {full_range[0]:.0f}-{full_range[1]:.0f} MHz\n' +
                        '‚ö†Ô∏è Muestra: TODO el rango de frecuencias', 
                        fontweight='bold', color='blue')
    axes[0,1].set_ylabel('Frecuencia (MHz)')
    axes[0,1].set_xlabel('Tiempo (s)')
    
    # Low Band waterfall (¬°ID√âNTICO visualmente!)
    axes[1,0].imshow(waterfall_data, aspect='auto', cmap='viridis',
                     extent=[0, 10, freq_start, freq_end])
    axes[1,0].set_title(f'LOW BAND WATERFALL\nProcesa: {low_range[0]:.0f}-{low_range[1]:.0f} MHz\n' +
                        '‚ö†Ô∏è Muestra: TODO el rango de frecuencias', 
                        fontweight='bold', color='green')
    axes[1,0].set_ylabel('Frecuencia (MHz)')
    axes[1,0].set_xlabel('Tiempo (s)')
    
    # Destacar la regi√≥n procesada en Low Band
    low_freq_start = low_range[0]
    low_freq_end = low_range[1]
    axes[1,0].axhspan(low_freq_start, low_freq_end, alpha=0.2, color='green', 
                      label=f'Regi√≥n procesada: {low_freq_start:.0f}-{low_freq_end:.0f} MHz')
    axes[1,0].legend()
    
    # High Band waterfall (¬°ID√âNTICO visualmente!)
    axes[1,1].imshow(waterfall_data, aspect='auto', cmap='viridis',
                     extent=[0, 10, freq_start, freq_end])
    axes[1,1].set_title(f'HIGH BAND WATERFALL\nProcesa: {high_range[0]:.0f}-{high_range[1]:.0f} MHz\n' +
                        '‚ö†Ô∏è Muestra: TODO el rango de frecuencias', 
                        fontweight='bold', color='red')
    axes[1,1].set_ylabel('Frecuencia (MHz)')
    axes[1,1].set_xlabel('Tiempo (s)')
    
    # Destacar la regi√≥n procesada en High Band
    high_freq_start = high_range[0]
    high_freq_end = high_range[1]
    axes[1,1].axhspan(high_freq_start, high_freq_end, alpha=0.2, color='red',
                      label=f'Regi√≥n procesada: {high_freq_start:.0f}-{high_freq_end:.0f} MHz')
    axes[1,1].legend()
    
    plt.tight_layout()
    plt.savefig('demo_visual_waterfalls_comparison.png', dpi=150, bbox_inches='tight')
    print("üíæ Guardado: demo_visual_waterfalls_comparison.png")
    plt.close()
    
    print()
    print("üîç PUNTOS CLAVE:")
    print("   1Ô∏è‚É£ TODOS los waterfalls son VISUALMENTE ID√âNTICOS")
    print("   2Ô∏è‚É£ Todos muestran el rango completo de frecuencias")
    print("   3Ô∏è‚É£ Solo cambia QU√â datos se usan para DETECCI√ìN")
    print("   4Ô∏è‚É£ Las regiones destacadas muestran qu√© frecuencias se procesan")
    print()
    
    return waterfall_data, frequencies

def create_dm_time_comparison(waterfall_data, frequencies):
    """Muestra c√≥mo difieren los cubos DM-tiempo entre bandas"""
    
    print("üìä DEMO: DIFERENCIAS EN CUBOS DM-TIEMPO")
    print("="*50)
    
    # Simular diferentes DMs
    dm_values = np.linspace(0, 200, 50)
    time_samples = waterfall_data.shape[1]
    
    # Simular procesamiento para cada banda
    fig, axes = plt.subplots(1, 3, figsize=(18, 6))
    fig.suptitle('CUBOS DM-TIEMPO: Lo que S√ç cambia entre bandas', fontsize=16, fontweight='bold')
    
    band_names = ['Full Band', 'Low Band', 'High Band']
    band_colors = ['blue', 'green', 'red']
    
    for band_idx in range(3):
        # Obtener rango de frecuencias para esta banda
        freq_range = get_band_frequency_range(frequencies, band_idx)
        
        # Simular cubo DM-tiempo (simplificado)
        dm_time_cube = np.random.normal(0.5, 0.1, (len(dm_values), time_samples))
        
        # Agregar se√±al simulada m√°s fuerte en ciertos DMs
        if band_idx == 0:  # Full band - se√±al en DM ~100
            dm_time_cube[25, 45:55] += 2.0
        elif band_idx == 1:  # Low band - se√±al m√°s d√©bil
            dm_time_cube[25, 45:55] += 1.0
        else:  # High band - se√±al m√°s fuerte
            dm_time_cube[25, 45:55] += 3.0
        
        # Plotear
        im = axes[band_idx].imshow(dm_time_cube, aspect='auto', cmap='plasma',
                                   extent=[0, 10, dm_values[0], dm_values[-1]])
        axes[band_idx].set_title(f'{band_names[band_idx]}\n{freq_range[0]:.0f}-{freq_range[1]:.0f} MHz',
                                 fontweight='bold', color=band_colors[band_idx])
        axes[band_idx].set_xlabel('Tiempo (s)')
        if band_idx == 0:
            axes[band_idx].set_ylabel('DM (pc cm‚Åª¬≥)')
        
        # Colorbar
        plt.colorbar(im, ax=axes[band_idx], label='Intensidad')
    
    plt.tight_layout()
    plt.savefig('demo_dm_time_cubes_comparison.png', dpi=150, bbox_inches='tight')
    print("üíæ Guardado: demo_dm_time_cubes_comparison.png")
    plt.close()
    
    print()
    print("üéØ ESTO S√ç CAMBIA ENTRE BANDAS:")
    print("   ‚Ä¢ Intensidad de las se√±ales detectadas")
    print("   ‚Ä¢ Qu√© candidatos se identifican como significativos")
    print("   ‚Ä¢ Eficiencia de detecci√≥n seg√∫n el tipo de FRB")
    print()

def main():
    """Funci√≥n principal"""
    print("üöÄ INICIANDO DEMO VISUAL COMPLETO")
    print()
    
    # Crear comparaci√≥n de waterfalls
    waterfall_data, frequencies = create_visual_comparison()
    
    print("\n" + "="*70 + "\n")
    
    # Crear comparaci√≥n de cubos DM-tiempo
    create_dm_time_comparison(waterfall_data, frequencies)
    
    print("‚úÖ DEMO COMPLETADO")
    print()
    print("üìÅ Archivos generados:")
    print("   ‚Ä¢ demo_visual_waterfalls_comparison.png")
    print("   ‚Ä¢ demo_dm_time_cubes_comparison.png")
    print()
    print("ü§î PREGUNTA RESPONDIDA:")
    print("   Los waterfalls de todas las bandas se ven EXACTAMENTE iguales")
    print("   porque todos muestran los datos originales completos.")
    print("   Lo que cambia es el PROCESAMIENTO interno para detectar se√±ales.")
    print()
    print("üìä RESUMEN VISUAL:")
    print("   ‚îå‚îÄ Datos originales (1200-1500 MHz)")
    print("   ‚îú‚îÄ Full Band: Waterfall = 1200-1500 MHz, Procesa = 1200-1500 MHz")
    print("   ‚îú‚îÄ Low Band:  Waterfall = 1200-1500 MHz, Procesa = 1200-1350 MHz") 
    print("   ‚îî‚îÄ High Band: Waterfall = 1200-1500 MHz, Procesa = 1350-1500 MHz")
    print()
    print("   ‚ö†Ô∏è  Los 3 waterfalls son visualmente ID√âNTICOS!")

if __name__ == "__main__":
    main()
