#!/usr/bin/env python3
"""
Ejemplo pr√°ctico de uso del sistema autom√°tico de par√°metros.

Este script demuestra c√≥mo usar el pipeline con c√°lculo autom√°tico de par√°metros
basado √∫nicamente en SLICE_DURATION_MS.
"""

import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def ejemplo_uso_basico():
    """Ejemplo b√°sico de uso del sistema autom√°tico."""
    
    print("üöÄ EJEMPLO DE USO DEL SISTEMA AUTOM√ÅTICO")
    print("=" * 50)
    print()
    
    print("1Ô∏è‚É£ CONFIGURACI√ìN M√çNIMA EN user_config.py:")
    print("""
# Solo necesitas configurar esto:
SLICE_DURATION_MS: float = 64.0  # Duraci√≥n deseada de cada slice en ms

# El resto se calcula autom√°ticamente:
# - SLICE_LEN (muestras por slice)
# - chunk_samples (tama√±o √≥ptimo de chunk)
# - slices_per_chunk
# - etc.
""")
    
    print("2Ô∏è‚É£ EJECUCI√ìN DEL PIPELINE:")
    print("""
# Modo autom√°tico (recomendado):
python main.py

# O expl√≠citamente:
from drafts.pipeline import run_pipeline
run_pipeline(chunk_samples=0)  # 0 = c√°lculo autom√°tico
""")
    
    print("3Ô∏è‚É£ EL SISTEMA CALCULA AUTOM√ÅTICAMENTE:")
    print("""
‚úÖ SLICE_LEN basado en SLICE_DURATION_MS y TIME_RESO
‚úÖ chunk_samples optimizado para memoria y rendimiento
‚úÖ slices_per_chunk para evitar fragmentaci√≥n
‚úÖ Validaci√≥n autom√°tica de todos los par√°metros
‚úÖ Logs informativos del proceso
""")

def ejemplo_configuraciones_tipicas():
    """Muestra configuraciones t√≠picas para diferentes casos de uso."""
    
    print("\nüìã CONFIGURACIONES T√çPICAS")
    print("=" * 50)
    
    configs = [
        {
            'caso': 'Detecci√≥n de FRB r√°pidos',
            'SLICE_DURATION_MS': 32.0,
            'descripcion': 'Slices cortos para capturar pulsos muy r√°pidos'
        },
        {
            'caso': 'Detecci√≥n general de FRB',
            'SLICE_DURATION_MS': 64.0,
            'descripcion': 'Balance entre sensibilidad y velocidad'
        },
        {
            'caso': 'An√°lisis de pulsos largos',
            'SLICE_DURATION_MS': 128.0,
            'descripcion': 'Slices m√°s largos para pulsos extendidos'
        },
        {
            'caso': 'B√∫squeda de se√±ales d√©biles',
            'SLICE_DURATION_MS': 256.0,
            'descripcion': 'Mayor integraci√≥n temporal para mejor SNR'
        }
    ]
    
    for config in configs:
        print(f"\nüîß {config['caso']}")
        print(f"   SLICE_DURATION_MS = {config['SLICE_DURATION_MS']} ms")
        print(f"   {config['descripcion']}")

def ejemplo_optimizacion_memoria():
    """Muestra c√≥mo el sistema optimiza la memoria autom√°ticamente."""
    
    print("\nüíæ OPTIMIZACI√ìN AUTOM√ÅTICA DE MEMORIA")
    print("=" * 50)
    
    print("""
El sistema considera autom√°ticamente:

üñ•Ô∏è  Memoria disponible del sistema
üìä Tama√±o del archivo de datos
‚ö° Resoluci√≥n temporal y frecuencial
üéØ Factor de decimado aplicado
üìà N√∫mero de canales de frecuencia

Y calcula el chunk_size √≥ptimo que:
‚úÖ No exceda el 25% de memoria disponible
‚úÖ Contenga entre 50-1000 slices por chunk
‚úÖ Sea m√∫ltiplo del slice_len
‚úÖ Optimice el rendimiento de I/O
""")

def ejemplo_logs_salida():
    """Muestra ejemplos de los logs que genera el sistema."""
    
    print("\nüìù EJEMPLO DE LOGS DEL SISTEMA")
    print("=" * 50)
    
    print("""
Cuando ejecutes el pipeline, ver√°s logs como:

‚úÖ Par√°metros calculados autom√°ticamente:
   ‚Ä¢ Slice: 512 muestras (64.0 ms)
   ‚Ä¢ Chunk: 128,000 muestras (45.2s)
   ‚Ä¢ Slices por chunk: 250
   ‚Ä¢ Total estimado: 78 chunks, 19,531 slices

üîß Archivo de alta resoluci√≥n temporal
   TIME_RESO: 0.0001s
   FREQ_RESO: 1024 canales
   FILE_LENG: 10,000,000 muestras
   DOWN_TIME_RATE: 1
   DOWN_FREQ_RATE: 1

‚úÖ SLICE_DURATION_MS=64.0ms:
   ‚Ä¢ Slice: 640 muestras (64.0ms)
   ‚Ä¢ Chunk: 160,000 muestras (16.0s)
   ‚Ä¢ Slices/chunk: 250
   ‚Ä¢ Total: 63 chunks, 15,625 slices
""")

def main():
    """Funci√≥n principal del ejemplo."""
    
    ejemplo_uso_basico()
    ejemplo_configuraciones_tipicas()
    ejemplo_optimizacion_memoria()
    ejemplo_logs_salida()
    
    print("\n" + "=" * 50)
    print("üéâ ¬°LISTO! Tu pipeline ahora es mucho m√°s simple de usar.")
    print("\nüí° VENTAJAS DEL NUEVO SISTEMA:")
    print("‚Ä¢ Solo configuras SLICE_DURATION_MS")
    print("‚Ä¢ Optimizaci√≥n autom√°tica de memoria")
    print("‚Ä¢ C√°lculo inteligente de chunk_size")
    print("‚Ä¢ Validaci√≥n autom√°tica de par√°metros")
    print("‚Ä¢ Logs informativos detallados")
    print("‚Ä¢ Compatible con archivos de diferentes tama√±os")

if __name__ == "__main__":
    main() 