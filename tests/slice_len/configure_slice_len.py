#!/usr/bin/env python3
"""
Herramienta interactiva para configurar SLICE_LEN din√°mico.

Permite al usuario configurar f√°cilmente la duraci√≥n temporal deseada
y actualiza autom√°ticamente el archivo config.py.
"""

import sys
from pathlib import Path

# Configurar path
sys.path.append(str(Path(__file__).parent))

def interactive_slice_len_config():
    """Configuraci√≥n interactiva de SLICE_LEN."""
    
    print("üõ†Ô∏è  === CONFIGURADOR INTERACTIVO SLICE_LEN ===\n")
    
    print("Este asistente te ayudar√° a configurar SLICE_LEN de manera intuitiva")
    print("bas√°ndote en la duraci√≥n temporal que deseas para cada slice.\n")
    
    # Paso 1: Tipo de se√±al
    print("üéØ PASO 1: ¬øQu√© tipo de se√±ales buscas?")
    print("   1. Pulsos muy cortos (< 20ms) - Ej: pulsars r√°pidos")
    print("   2. FRBs t√≠picos (20-100ms) - Configuraci√≥n est√°ndar")
    print("   3. Se√±ales largas (100-500ms) - Ej: FRBs dispersos")
    print("   4. Se√±ales muy dispersas (> 500ms) - Casos extremos")
    print("   5. Configuraci√≥n personalizada")
    
    while True:
        try:
            choice = input("\nSelecciona una opci√≥n (1-5): ").strip()
            if choice in ['1', '2', '3', '4', '5']:
                break
            print("‚ùå Opci√≥n no v√°lida. Usa n√∫meros 1-5.")
        except KeyboardInterrupt:
            print("\n‚ùå Configuraci√≥n cancelada.")
            return
    
    # Determinar duraci√≥n seg√∫n elecci√≥n
    signal_types = {
        '1': ('short', 0.016, 'Pulsos muy cortos'),
        '2': ('medium', 0.032, 'FRBs t√≠picos'),
        '3': ('long', 0.064, 'Se√±ales largas'),
        '4': ('dispersed', 0.128, 'Se√±ales muy dispersas'),
    }
    
    if choice in signal_types:
        signal_type, duration, description = signal_types[choice]
        print(f"\n‚úÖ Seleccionado: {description}")
        print(f"   Duraci√≥n recomendada: {duration:.3f} s ({duration*1000:.0f} ms)")
    else:
        # Configuraci√≥n personalizada
        print("\n‚öôÔ∏è  CONFIGURACI√ìN PERSONALIZADA:")
        while True:
            try:
                duration = float(input("Introduce duraci√≥n deseada en segundos (ej: 0.032): "))
                if 0.001 <= duration <= 1.0:
                    break
                print("‚ùå Duraci√≥n debe estar entre 0.001 y 1.0 segundos.")
            except ValueError:
                print("‚ùå Valor no v√°lido. Usa formato decimal (ej: 0.032).")
            except KeyboardInterrupt:
                print("\n‚ùå Configuraci√≥n cancelada.")
                return
        
        description = f"Personalizada ({duration*1000:.1f} ms)"
    
    # Paso 2: Configuraci√≥n avanzada
    print(f"\nüîß PASO 2: Configuraci√≥n avanzada")
    
    # L√≠mites de SLICE_LEN
    print("   ¬øQuieres usar l√≠mites autom√°ticos para SLICE_LEN? (recomendado)")
    use_auto_limits = input("   [Y/n]: ").strip().lower() not in ['n', 'no']
    
    if use_auto_limits:
        if duration <= 0.025:  # Se√±ales cortas
            min_slice = 8
            max_slice = 128
        elif duration <= 0.075:  # Se√±ales medias
            min_slice = 16
            max_slice = 256
        else:  # Se√±ales largas
            min_slice = 32
            max_slice = 512
        
        print(f"   ‚úÖ L√≠mites autom√°ticos: SLICE_LEN entre {min_slice} y {max_slice}")
    else:
        while True:
            try:
                min_slice = int(input("   SLICE_LEN m√≠nimo (ej: 16): "))
                max_slice = int(input("   SLICE_LEN m√°ximo (ej: 512): "))
                if min_slice < max_slice and min_slice >= 4 and max_slice <= 2048:
                    break
                print("‚ùå Valores no v√°lidos. Min < Max, y dentro de 4-2048.")
            except ValueError:
                print("‚ùå Usa n√∫meros enteros.")
            except KeyboardInterrupt:
                print("\n‚ùå Configuraci√≥n cancelada.")
                return
    
    # Paso 3: Mostrar resumen y confirmar
    print(f"\nüìã RESUMEN DE CONFIGURACI√ìN:")
    print(f"   ‚Ä¢ Tipo de se√±al: {description}")
    print(f"   ‚Ä¢ Duraci√≥n objetivo: {duration:.3f} s ({duration*1000:.1f} ms)")
    print(f"   ‚Ä¢ SLICE_LEN autom√°tico: ‚úÖ Habilitado")
    print(f"   ‚Ä¢ L√≠mites SLICE_LEN: {min_slice} - {max_slice}")
    print(f"   ‚Ä¢ Preferir potencias de 2: ‚úÖ S√≠")
    
    confirm = input("\n¬øAplicar esta configuraci√≥n? [Y/n]: ").strip().lower()
    if confirm in ['n', 'no']:
        print("‚ùå Configuraci√≥n cancelada.")
        return
    
    # Paso 4: Actualizar config.py
    try:
        update_config_file(duration, min_slice, max_slice)
        print(f"\n‚úÖ CONFIGURACI√ìN APLICADA EXITOSAMENTE")
        
        # Mostrar ejemplo de uso
        print(f"\nüöÄ PR√ìXIMOS PASOS:")
        print(f"   1. Ejecuta tu pipeline normalmente: python main.py")
        print(f"   2. El sistema calcular√° autom√°ticamente SLICE_LEN √≥ptimo")
        print(f"   3. Revisa los logs para ver el valor calculado")
        
        # Mostrar comando para an√°lisis
        print(f"\nüîç PARA ANALIZAR LA CONFIGURACI√ìN:")
        print(f"   python -c \"from DRAFTS.slice_len_utils import print_slice_len_analysis; from DRAFTS import config; print_slice_len_analysis(config)\"")
        
    except Exception as e:
        print(f"\n‚ùå Error actualizando configuraci√≥n: {e}")
        print("   Revisa permisos de archivo y vuelve a intentar.")

def update_config_file(duration: float, min_slice: int, max_slice: int):
    """Actualiza el archivo config.py con la nueva configuraci√≥n."""
    
    config_path = Path(__file__).parent / "DRAFTS" / "config.py"
    
    if not config_path.exists():
        raise FileNotFoundError(f"No se encontr√≥ config.py en {config_path}")
    
    # Leer archivo actual
    with open(config_path, 'r', encoding='utf-8') as f:
        lines = f.readlines()
    
    # Buscar y actualizar l√≠neas relevantes
    updated_lines = []
    found_duration = False
    found_auto = False
    found_min = False
    found_max = False
    
    for line in lines:
        stripped = line.strip()
        
        if stripped.startswith('SLICE_DURATION_SECONDS:'):
            updated_lines.append(f'SLICE_DURATION_SECONDS: float = {duration:.3f}  # Duraci√≥n deseada por slice en segundos\n')
            found_duration = True
        elif stripped.startswith('SLICE_LEN_AUTO:'):
            updated_lines.append('SLICE_LEN_AUTO: bool = True  # Calcular SLICE_LEN autom√°ticamente\n')
            found_auto = True
        elif stripped.startswith('SLICE_LEN_MIN:'):
            updated_lines.append(f'SLICE_LEN_MIN: int = {min_slice}      # Valor m√≠nimo permitido para SLICE_LEN\n')
            found_min = True
        elif stripped.startswith('SLICE_LEN_MAX:'):
            updated_lines.append(f'SLICE_LEN_MAX: int = {max_slice}     # Valor m√°ximo permitido para SLICE_LEN\n')
            found_max = True
        else:
            updated_lines.append(line)
    
    # Verificar que se encontraron todas las configuraciones
    if not all([found_duration, found_auto, found_min, found_max]):
        missing = []
        if not found_duration: missing.append('SLICE_DURATION_SECONDS')
        if not found_auto: missing.append('SLICE_LEN_AUTO')
        if not found_min: missing.append('SLICE_LEN_MIN')
        if not found_max: missing.append('SLICE_LEN_MAX')
        
        raise ValueError(f"No se encontraron las siguientes configuraciones en config.py: {missing}")
    
    # Escribir archivo actualizado
    with open(config_path, 'w', encoding='utf-8') as f:
        f.writelines(updated_lines)
    
    print(f"‚úÖ Archivo config.py actualizado en: {config_path}")

def main():
    """Funci√≥n principal del configurador."""
    
    print("üéõÔ∏è  CONFIGURADOR SLICE_LEN DIN√ÅMICO")
    print("=" * 50)
    print("Herramienta para configurar SLICE_LEN de manera intuitiva")
    print("bas√°ndote en la duraci√≥n temporal deseada.\n")
    
    try:
        interactive_slice_len_config()
    except KeyboardInterrupt:
        print("\n\n‚ùå Configuraci√≥n interrumpida por el usuario.")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        print("   Por favor reporta este error.")

if __name__ == "__main__":
    main()
