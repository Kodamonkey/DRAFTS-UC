#!/usr/bin/env python3
"""
Demostraci√≥n del sistema autom√°tico de SLICE_LEN basado en metadatos.

Este script muestra c√≥mo el sistema analiza autom√°ticamente las caracter√≠sticas
del archivo y calcula el SLICE_LEN √≥ptimo sin intervenci√≥n del usuario.
"""

import sys
from pathlib import Path
import numpy as np

# Configurar path
sys.path.append(str(Path(__file__).parent))

from DRAFTS.auto_slice_len import SliceLenOptimizer

def demo_automatic_slice_len():
    """Demuestra el c√°lculo autom√°tico de SLICE_LEN."""
    
    print("üöÄ === SISTEMA AUTOM√ÅTICO DE SLICE_LEN ===\n")
    print("Este sistema analiza autom√°ticamente los metadatos del archivo")
    print("y calcula el SLICE_LEN √≥ptimo para m√°xima resoluci√≥n temporal.\n")
    
    # Crear optimizador
    optimizer = SliceLenOptimizer()
    
    # Casos de prueba con diferentes tipos de archivos
    test_cases = [
        {
            'name': 'FRB t√≠pico alta resoluci√≥n',
            'time_reso': 0.001,      # 1ms
            'freq_reso': 1.0,        # 1 MHz
            'file_length': 2048,     # 2048 muestras
            'freq_range': (1200.0, 1500.0),  # 300 MHz de ancho de banda
            'dm_max': 1024,
            'filename': 'FRB20121102_highres.fil'
        },
        {
            'name': 'Pulsar r√°pido',
            'time_reso': 0.0005,     # 0.5ms
            'freq_reso': 0.5,        # 0.5 MHz
            'file_length': 4096,     # 4096 muestras
            'freq_range': (400.0, 800.0),    # 400 MHz
            'dm_max': 500,
            'filename': 'PSR_J1234+5678.fits'
        },
        {
            'name': 'FRB disperso banda L',
            'time_reso': 0.002,      # 2ms
            'freq_reso': 2.0,        # 2 MHz
            'file_length': 1024,     # 1024 muestras
            'freq_range': (1000.0, 2000.0),  # 1000 MHz
            'dm_max': 2000,
            'filename': 'FRB_dispersed_Lband.fil'
        },
        {
            'name': 'Observaci√≥n larga banda S',
            'time_reso': 0.01,       # 10ms
            'freq_reso': 5.0,        # 5 MHz
            'file_length': 10000,    # 10000 muestras
            'freq_range': (2000.0, 4000.0),  # 2000 MHz
            'dm_max': 1500,
            'filename': 'long_observation_Sband.fits'
        },
        {
            'name': 'Archivo filterbank est√°ndar',
            'time_reso': 0.000512,   # ~0.5ms t√≠pico
            'freq_reso': 1.0,
            'file_length': 8192,
            'freq_range': (1100.0, 1700.0),
            'dm_max': 1024,
            'filename': '3100_0001_00_8bit.fil'
        }
    ]
    
    print("üìä AN√ÅLISIS AUTOM√ÅTICO PARA DIFERENTES TIPOS DE ARCHIVOS:\n")
    
    results = []
    
    for i, case in enumerate(test_cases, 1):
        print(f"üî∏ CASO {i}: {case['name']}")
        print(f"   Archivo: {case['filename']}")
        print(f"   Resoluci√≥n temporal: {case['time_reso']*1000:.3f} ms")
        print(f"   Duraci√≥n total: {case['file_length'] * case['time_reso']:.3f} s")
        print(f"   Ancho de banda: {case['freq_range'][1] - case['freq_range'][0]:.0f} MHz")
        print("   " + "-" * 50)
        
        # Calcular SLICE_LEN autom√°tico
        optimal_slice_len, analysis = optimizer.get_automatic_slice_len(
            time_reso=case['time_reso'],
            freq_reso=case['freq_reso'],
            file_length=case['file_length'],
            freq_range=case['freq_range'],
            dm_max=case['dm_max'],
            filename=case['filename']
        )
        
        opt_details = analysis['optimization']
        
        print(f"   üéØ SLICE_LEN √≥ptimo: {optimal_slice_len}")
        print(f"   ‚è∞ Duraci√≥n por slice: {opt_details['real_duration']*1000:.1f} ms")
        print(f"   üî¢ N√∫mero de slices: {opt_details['n_slices']}")
        print(f"   üìà Tipo de archivo detectado: {analysis['content']['file_type']}")
        print(f"   üîç Resoluci√≥n temporal: {analysis['resolution']['resolution_score']}")
        
        # Factores aplicados
        factors = opt_details['factors']
        print(f"   üìä Factores de ajuste:")
        print(f"      ‚Ä¢ Dispersi√≥n: {factors['disp_factor']:.3f}")
        print(f"      ‚Ä¢ Resoluci√≥n: {factors['resolution_factor']:.3f}")
        print(f"      ‚Ä¢ Contexto: {factors['context_factor']:.3f}")
        print(f"      ‚Ä¢ Eficiencia: {factors['efficiency_factor']:.3f}")
        
        results.append({
            'name': case['name'],
            'filename': case['filename'],
            'slice_len': optimal_slice_len,
            'duration_ms': opt_details['real_duration'] * 1000,
            'n_slices': opt_details['n_slices']
        })
        
        print()
    
    # Resumen comparativo
    print("üìã === RESUMEN COMPARATIVO ===\n")
    print("Archivo                          | SLICE_LEN | Duraci√≥n | N_Slices | Caracter√≠sticas")
    print("-" * 95)
    
    for result in results:
        filename_short = result['filename'][:25] + "..." if len(result['filename']) > 28 else result['filename']
        print(f"{filename_short:32s} | {result['slice_len']:8d} | {result['duration_ms']:7.1f}ms | "
              f"{result['n_slices']:7d} | Autom√°tico")
    
    print("-" * 95)
    
    print(f"\nüí° BENEFICIOS DEL SISTEMA AUTOM√ÅTICO:")
    print(f"   ‚úÖ Sin configuraci√≥n manual necesaria")
    print(f"   ‚úÖ Optimizaci√≥n espec√≠fica por archivo")
    print(f"   ‚úÖ Considera dispersi√≥n, resoluci√≥n y contenido")
    print(f"   ‚úÖ Se adapta autom√°ticamente a cualquier tipo de datos")
    print(f"   ‚úÖ Maximiza resoluci√≥n temporal sin perder contexto")

def demo_comparison_with_manual():
    """Compara sistema autom√°tico vs configuraci√≥n manual."""
    
    print(f"\nüîÑ === COMPARACI√ìN: AUTOM√ÅTICO vs MANUAL ===\n")
    
    # Archivo de ejemplo
    optimizer = SliceLenOptimizer()
    
    test_file = {
        'time_reso': 0.001,
        'freq_reso': 1.0,
        'file_length': 2048,
        'freq_range': (1200.0, 1500.0),
        'dm_max': 1024,
        'filename': 'example_FRB.fil'
    }
    
    # Calcular autom√°ticamente
    auto_slice_len, auto_analysis = optimizer.get_automatic_slice_len(**test_file)
    auto_duration = auto_slice_len * test_file['time_reso']
    auto_slices = test_file['file_length'] // auto_slice_len
    
    # Valores manuales t√≠picos
    manual_values = [32, 64, 128, 256]
    
    print("M√©todo                  | SLICE_LEN | Duraci√≥n | N_Slices | Resoluci√≥n/pixel | Comentario")
    print("-" * 90)
    
    # Mostrar autom√°tico
    auto_res_per_pixel = auto_duration / 512 * 1000  # ms por pixel
    print(f"üöÄ Autom√°tico            | {auto_slice_len:8d} | {auto_duration*1000:7.1f}ms | "
          f"{auto_slices:7d} | {auto_res_per_pixel:11.3f}ms | √ìptimo calculado")
    
    # Mostrar manuales
    for manual_val in manual_values:
        manual_duration = manual_val * test_file['time_reso']
        manual_slices = test_file['file_length'] // manual_val
        manual_res_per_pixel = manual_duration / 512 * 1000
        
        if manual_val == auto_slice_len:
            comment = "‚úÖ Igual al autom√°tico"
        elif abs(manual_val - auto_slice_len) <= 16:
            comment = "üü° Cercano al √≥ptimo"
        elif manual_val < auto_slice_len:
            comment = "üîç M√°s resoluci√≥n"
        else:
            comment = "üåä M√°s contexto"
        
        print(f"üìê Manual (SLICE_LEN={manual_val:3d}) | {manual_val:8d} | {manual_duration*1000:7.1f}ms | "
              f"{manual_slices:7d} | {manual_res_per_pixel:11.3f}ms | {comment}")
    
    print("-" * 90)
    
    print(f"\nüéØ AN√ÅLISIS:")
    print(f"   ‚Ä¢ El sistema autom√°tico eligi√≥ SLICE_LEN = {auto_slice_len}")
    print(f"   ‚Ä¢ Basado en an√°lisis de dispersi√≥n, resoluci√≥n y tipo de archivo")
    print(f"   ‚Ä¢ Optimiza balance entre resoluci√≥n temporal y contexto")
    print(f"   ‚Ä¢ No requiere intervenci√≥n manual del usuario")

def demo_config_usage():
    """Muestra c√≥mo usar el sistema en la configuraci√≥n."""
    
    print(f"\n‚öôÔ∏è  === USO EN CONFIGURACI√ìN ===\n")
    
    print("Para habilitar el sistema autom√°tico en tu pipeline:")
    print()
    print("üìù En config.py:")
    print("```python")
    print("# Habilitar sistema autom√°tico inteligente")
    print("SLICE_LEN_INTELLIGENT: bool = True")
    print("SLICE_LEN_OVERRIDE_MANUAL: bool = True")
    print()
    print("# Configuraci√≥n de fallback (si el autom√°tico falla)")
    print("SLICE_LEN_AUTO: bool = True")
    print("SLICE_DURATION_SECONDS: float = 0.032")
    print()
    print("# Valor manual de emergencia")
    print("SLICE_LEN: int = 32")
    print("```")
    print()
    print("üöÄ ¬°Eso es todo! El sistema trabajar√° autom√°ticamente.")
    print()
    print("üìä Jerarqu√≠a de decisi√≥n:")
    print("   1. üéØ Sistema Inteligente (analiza metadatos del archivo)")
    print("   2. ‚öôÔ∏è  Sistema Din√°mico (basado en SLICE_DURATION_SECONDS)")
    print("   3. üìê Valor Manual (SLICE_LEN fijo)")
    print()
    print("üí° El sistema autom√°ticamente:")
    print("   ‚úÖ Lee metadatos del archivo (.fil, .fits)")
    print("   ‚úÖ Analiza resoluci√≥n temporal, frecuencias, dispersi√≥n")
    print("   ‚úÖ Detecta tipo de se√±ales esperadas")
    print("   ‚úÖ Calcula SLICE_LEN √≥ptimo para cada archivo")
    print("   ‚úÖ Se adapta autom√°ticamente sin configuraci√≥n manual")

def main():
    """Funci√≥n principal de demostraci√≥n."""
    
    print("üåü SISTEMA AUTOM√ÅTICO DE SLICE_LEN BASADO EN METADATOS")
    print("=" * 60)
    print("¬°Calcula autom√°ticamente el SLICE_LEN √≥ptimo para cada archivo!")
    print("Sin configuraci√≥n manual. Sin c√°lculos. ¬°Completamente autom√°tico!")
    print()
    
    demo_automatic_slice_len()
    demo_comparison_with_manual()
    demo_config_usage()
    
    print(f"\nüéâ ¬°DISFRUTA DEL SISTEMA COMPLETAMENTE AUTOM√ÅTICO!")
    print(f"   Tu pipeline ahora se optimiza autom√°ticamente para cada archivo.")

if __name__ == "__main__":
    main()
