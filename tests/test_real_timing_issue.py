#!/usr/bin/env python3
"""
Test para simular exactamente el problema reportado por el usuario:
Chunk 1 termina en 111.54s y Chunk 2 parte en 1528.41s (gap de ~1417s)
"""

import sys
from pathlib import Path
import numpy as np

# Agregar el directorio ra√≠z al path
sys.path.insert(0, str(Path(__file__).parent.parent))

from DRAFTS import config


def analyze_reported_issue():
    """Analizar el problema espec√≠fico reportado por el usuario."""
    
    print("üîç AN√ÅLISIS DEL PROBLEMA REPORTADO")
    print("=" * 60)
    print("Usuario reporta: Chunk 1 termina en 111.54s, Chunk 2 parte en 1528.41s")
    print("Gap detectado: ~1417 segundos")
    print()
    
    # Intentar recrear el problema con diferentes configuraciones
    scenarios = [
        {
            "name": "Configuraci√≥n t√≠pica",
            "TIME_RESO": 0.000001,
            "DOWN_TIME_RATE": 14,
            "chunk_size": 2_000_000,
            "overlap": 1000
        },
        {
            "name": "Configuraci√≥n alta resoluci√≥n",
            "TIME_RESO": 0.0000001,
            "DOWN_TIME_RATE": 1,
            "chunk_size": 2_000_000,
            "overlap": 1000
        },
        {
            "name": "Configuraci√≥n con decimaci√≥n alta",
            "TIME_RESO": 0.000001,
            "DOWN_TIME_RATE": 100,
            "chunk_size": 2_000_000,
            "overlap": 1000
        },
        {
            "name": "Configuraci√≥n con chunk grande",
            "TIME_RESO": 0.000001,
            "DOWN_TIME_RATE": 14,
            "chunk_size": 10_000_000,
            "overlap": 1000
        }
    ]
    
    for scenario in scenarios:
        print(f"üìä ESCENARIO: {scenario['name']}")
        print("-" * 40)
        
        # Configurar par√°metros
        config.TIME_RESO = scenario["TIME_RESO"]
        config.DOWN_TIME_RATE = scenario["DOWN_TIME_RATE"]
        chunk_size = scenario["chunk_size"]
        overlap = scenario["overlap"]
        
        # Calcular chunks
        effective_chunk_size = chunk_size - overlap
        start_sample_1 = 0
        end_sample_1 = chunk_size
        start_sample_2 = effective_chunk_size
        end_sample_2 = start_sample_2 + chunk_size
        
        # Calcular tiempos
        time_1_start = start_sample_1 * config.TIME_RESO * config.DOWN_TIME_RATE
        time_1_end = end_sample_1 * config.TIME_RESO * config.DOWN_TIME_RATE
        time_2_start = start_sample_2 * config.TIME_RESO * config.DOWN_TIME_RATE
        time_2_end = end_sample_2 * config.TIME_RESO * config.DOWN_TIME_RATE
        
        gap = time_2_start - time_1_end
        
        print(f"   ‚è±Ô∏è  TIME_RESO: {config.TIME_RESO}")
        print(f"   üîΩ DOWN_TIME_RATE: {config.DOWN_TIME_RATE}")
        print(f"   üìè Chunk size: {chunk_size:,}")
        print(f"   üìè Effective chunk size: {effective_chunk_size:,}")
        print()
        print(f"   Chunk 1: {start_sample_1:,} a {end_sample_1:,}")
        print(f"   Chunk 2: {start_sample_2:,} a {end_sample_2:,}")
        print()
        print(f"   üïê Chunk 1: {time_1_start:.3f}s a {time_1_end:.3f}s")
        print(f"   üïê Chunk 2: {time_2_start:.3f}s a {time_2_end:.3f}s")
        print(f"   üîó Gap: {gap:.3f}s")
        
        # Verificar si coincide con el problema reportado
        if abs(time_1_end - 111.54) < 1.0 and abs(time_2_start - 1528.41) < 1.0:
            print(f"   üéØ ¬°COINCIDENCIA ENCONTRADA!")
            print(f"   ‚úÖ Este escenario reproduce el problema reportado")
        elif abs(gap - 1417) < 10:
            print(f"   üéØ ¬°GAP SIMILAR ENCONTRADO!")
            print(f"   ‚úÖ Gap de {gap:.3f}s similar al reportado ({1417}s)")
        else:
            print(f"   ‚ùå No coincide con el problema reportado")
        print()


def analyze_configuration_issues():
    """Analizar posibles problemas de configuraci√≥n."""
    
    print("\nüîç AN√ÅLISIS DE POSIBLES PROBLEMAS DE CONFIGURACI√ìN")
    print("=" * 60)
    
    # Problema 1: Configuraci√≥n incorrecta de TIME_RESO
    print("1Ô∏è‚É£ PROBLEMA: TIME_RESO incorrecto")
    print("-" * 30)
    print("Si TIME_RESO est√° mal configurado, los tiempos ser√°n incorrectos.")
    print("Ejemplo: TIME_RESO = 0.001 en lugar de 0.000001")
    print()
    
    # Problema 2: DOWN_TIME_RATE incorrecto
    print("2Ô∏è‚É£ PROBLEMA: DOWN_TIME_RATE incorrecto")
    print("-" * 30)
    print("Si DOWN_TIME_RATE no coincide con la decimaci√≥n real, habr√° saltos.")
    print("Ejemplo: DOWN_TIME_RATE = 1 pero datos est√°n decimados por 14")
    print()
    
    # Problema 3: C√°lculo incorrecto de start_sample_global
    print("3Ô∏è‚É£ PROBLEMA: start_sample_global incorrecto")
    print("-" * 30)
    print("Si start_sample_global no se calcula correctamente, los tiempos ser√°n err√≥neos.")
    print("Esto puede pasar si hay confusi√≥n entre muestras originales y decimadas.")
    print()
    
    # Problema 4: Problema en _load_fil_chunk
    print("4Ô∏è‚É£ PROBLEMA: _load_fil_chunk incorrecto")
    print("-" * 30)
    print("Si _load_fil_chunk no lee las muestras correctas, los tiempos ser√°n err√≥neos.")
    print("Esto puede pasar si el offset en el archivo no se calcula correctamente.")
    print()


def suggest_solutions():
    """Sugerir soluciones para el problema."""
    
    print("\nüí° SOLUCIONES SUGERIDAS")
    print("=" * 60)
    
    print("1Ô∏è‚É£ VERIFICAR CONFIGURACI√ìN:")
    print("   - Revisar TIME_RESO en el archivo de datos")
    print("   - Verificar DOWN_TIME_RATE vs decimaci√≥n real")
    print("   - Confirmar que los par√°metros coinciden con los datos")
    print()
    
    print("2Ô∏è‚É£ AGREGAR DEBUG TEMPORAL:")
    print("   - Agregar logs detallados de timing en _process_single_chunk")
    print("   - Verificar que chunk_start_time_sec se calcula correctamente")
    print("   - Confirmar que se pasa correctamente a las funciones de visualizaci√≥n")
    print()
    
    print("3Ô∏è‚É£ VERIFICAR _load_fil_chunk:")
    print("   - Confirmar que lee las muestras correctas del archivo")
    print("   - Verificar el c√°lculo del offset en el archivo")
    print("   - Asegurar que no hay p√©rdida de muestras")
    print()
    
    print("4Ô∏è‚É£ COMPARAR CON PIPELINE TRADICIONAL:")
    print("   - Ejecutar el mismo archivo con pipeline tradicional")
    print("   - Comparar los tiempos generados")
    print("   - Identificar d√≥nde divergen los resultados")
    print()


def main():
    """Funci√≥n principal."""
    analyze_reported_issue()
    analyze_configuration_issues()
    suggest_solutions()


if __name__ == "__main__":
    main() 